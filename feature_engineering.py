import numpy as np 
import pandas as pd 
from data_dtypes import DTYPES
from tqdm import tqdm

TRAIN_OUTPUT_PATH = './train_kaggle_feature_engineered.pickle'
TEST_OUTPUT_PATH = './test_kaggle_feature_engineered.pickle'

# https://gist.github.com/eherrerosj/fdac2b3761a10332da163b1c90367890
def reduce_mem_usage(df, verbose=True):
    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']
    start_mem = df.memory_usage().sum() / 1024**2    
    for col in df.columns:
        col_type = df[col].dtypes
        if col_type in numerics:
            c_min = df[col].min()
            c_max = df[col].max()
            if str(col_type)[:3] == 'int':
                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:
                    df[col] = df[col].astype(np.int8)
                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:
                    df[col] = df[col].astype(np.int16)
                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:
                    df[col] = df[col].astype(np.int32)
                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:
                    df[col] = df[col].astype(np.int64)  
            else:
                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:
                    df[col] = df[col].astype(np.float16)
                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:
                    df[col] = df[col].astype(np.float32)
                else:
                    df[col] = df[col].astype(np.float64)    
    end_mem = df.memory_usage().sum() / 1024**2
    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) / start_mem))
    return df

def frequency_encoding(variable):
    t = pd.concat([train[variable], test[variable]]).value_counts().reset_index()
    t = t.reset_index()
    t.loc[t[variable] == 1, 'level_0'] = np.nan
    t.set_index('index', inplace=True)
    max_label = t['level_0'].max() + 1
    t.fillna(max_label, inplace=True)
    return t.to_dict()['level_0']

cols_to_use = ['MachineIdentifier', 'HasDetections', 
               'EngineVersion', 'AppVersion', 'RtpStateBitfield', 'AVProductsInstalled', 'IeVerIdentifier', 
               'SmartScreen', 'Census_OEMNameIdentifier', 'Census_ProcessorModelIdentifier', 
               'Census_PrimaryDiskTotalCapacity', 'Census_SystemVolumeTotalCapacity', 'Census_TotalPhysicalRAM', 
               'Census_InternalPrimaryDiagonalDisplaySizeInInches', 'Census_InternalBatteryNumberOfCharges', 
               'Census_OSBranch', 'Census_OSBuildRevision', 'Census_OSSkuName', 'Census_OSInstallTypeName', 
               'Census_ActivationChannel', 'Wdft_IsGamer', 'Wdft_RegionIdentifier']

categorical_features = ['SmartScreen', 'Census_OSInstallTypeName', 'Census_ActivationChannel',
                        'Census_OSBranch', 'Census_OSSkuName']

train = pd.read_csv('./train.csv', dtype = DTYPES, usecols=cols_to_use)
cols_to_use.remove('HasDetections')
test = pd.read_csv('./test.csv', dtype = DTYPES, usecols=cols_to_use)

frequency_encoded_variables = [
    'Census_ProcessorModelIdentifier',
    'Census_OEMNameIdentifier',
    'AppVersion', 
    'EngineVersion'
]

for variable in tqdm(frequency_encoded_variables):
    freq_enc_dict = frequency_encoding(variable)
    train[variable] = train[variable].map(lambda x: freq_enc_dict.get(x, np.nan))
    test[variable] = test[variable].map(lambda x: freq_enc_dict.get(x, np.nan))
    train[variable] = train[variable].astype('float16')
    test[variable] = test[variable].astype('float16')   

indexer = {}
for col in tqdm(categorical_features):
    print(col)
    if col == 'MachineIdentifier': continue
    _, indexer[col] = pd.factorize(train[col])
    
for col in tqdm(categorical_features):
    if col == 'MachineIdentifier': continue
    train[col] = indexer[col].get_indexer(train[col])
    test[col] = indexer[col].get_indexer(test[col])

train = reduce_mem_usage(train)
test = reduce_mem_usage(test)

train.to_pickle(TRAIN_OUTPUT_PATH)
test.to_pickle(TEST_OUTPUT_PATH)
